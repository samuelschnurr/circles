@using Io.Schnurr.Circles.App.Services;
@using Io.Schnurr.Circles.Shared.Enums;
@using Io.Schnurr.Circles.Shared.Models;
@using Io.Schnurr.Circles.Shared.Validators;
@attribute [Route(Routes.Offer.Form)]
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Offer</PageTitle>

<NavigationBar OnNavigateBack="NavigateBack" />

@{
    if (ShowLoadingSpinner)
    {
        <ProgressCircular />
        return;
    }
}

<MudPaper Elevation="6" Class="pa-3">
    <MudForm Model="Model" @ref="form" Validation="advertisementValidator.ValidateValue" ValidationDelay="0">
        <MudGrid>
            <MudItem xs="12" lg="6">
                <MudTextField Label="Title" Immediate="true" @bind-Value="Model.Title" For="@(() => Model.Title)" />
                <MudTextField Label="Price" Immediate="true" @bind-Value="Model.Price" For="@(() => Model.Price)" />
                <EnumSelect Label="Condition" Immediate="true" SelectedValue="Model.Condition" OnSelectedValueChanged="@((AdvertisementCondition c) => SetCondition(c))" For="@(() => Model.Condition)" />
                <FileUpload BrowserFile="Model.Image" For="@(() => Model.Image)" />
            </MudItem>
            <MudItem xs="12" lg="6">
                <MudTextField Label="Description" Immediate="true" Lines="15" @bind-Value="Model.Description" For="@(() => Model.Description)" />
            </MudItem>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto ma-4" OnClick="@(async () => await Submit())">Submit</MudButton>
        </MudGrid>
    </MudForm>
</MudPaper>
@attribute [Route(Routes.Offer.Form)]
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Offer</PageTitle>

<NavigationBar OnNavigateBack="NavigateBack" />

@{
    if (ShowLoadingSpinner)
    {
        <ProgressCircular />
        return;
    }
}

@using FluentValidation
@using Io.Schnurr.Circles.Shared.Enums;
@using Io.Schnurr.Circles.Shared.Models;
@using Io.Schnurr.Circles.Shared.Validators;

@using System.ComponentModel.DataAnnotations

@* TODO: Show edit form with values when model exists *@
<MudForm Model="model" @ref="form" Validation="advertisementValidator.ValidateValue" ValidationDelay="0">
    <MudGrid>
        <MudItem xs="12" lg="6">
            <MudPaper Elevation="6" Class="pa-3">
                <MudTextField Label="Title" Immediate="true" @bind-Value="model.Title" For="@(() => model.Title)" />
                <MudTextField Label="Price" Immediate="true" @bind-Value="model.Price" For="@(() => model.Price)" />
                <EnumSelect Label="Condition" Immediate="true" SelectedValue="model.Condition" OnSelectedValueChanged="@((AdvertisementCondition condition) => model.Condition = condition)" For="@(() => model.Condition)" />
                <MudTextField Label="Description" Immediate="true" Lines="10" @bind-Value="model.Description" For="@(() => model.Description)" />
            </MudPaper>
        </MudItem>
        <MudItem xs="12" lg="6">
            <MudPaper Elevation="6" Class="pa-3">
                @* TODO: Add FileUpload Field *@
                <MudTextField Label="Image" Immediate="true" @bind-Value="model.Base64Image" For="@(() => model.Base64Image)" />
            </MudPaper>
        </MudItem>
        @* TODO: Correct hight for second block (images) and where to align button? *@
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">Submit</MudButton>
    </MudGrid>
</MudForm>


@code {
    // TODO: Extract Code to code behind
    [Inject] ISnackbar Snackbar { get; set; }

    MudForm form;

    AdvertisementValidator advertisementValidator = new AdvertisementValidator();

    Advertisement model = new Advertisement();

    private async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            Snackbar.Add("Submited!");
            // TODO: Submit Form To API
            // TODO: Receive, Validate and Store Post in API
            // TODO: Implement Snackbars and use also for error boundary?
        }
    }
}
